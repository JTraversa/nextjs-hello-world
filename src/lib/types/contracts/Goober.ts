/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GooberInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "MANAGEMENT_FEE_BPS()": FunctionFragment;
    "PERFORMANCE_FEE_BPS()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "artGobblers()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blockTimestampLast()": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToFractions(uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256[],uint256,address)": FunctionFragment;
    "feeTo()": FunctionFragment;
    "flagGobbler(uint256,bool)": FunctionFragment;
    "flagged(uint256)": FunctionFragment;
    "getReserves()": FunctionFragment;
    "goo()": FunctionFragment;
    "kDebt()": FunctionFragment;
    "kLast()": FunctionFragment;
    "mintGobbler()": FunctionFragment;
    "minter()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "previewDeposit(uint256[],uint256)": FunctionFragment;
    "previewSwap(uint256[],uint256,uint256[],uint256)": FunctionFragment;
    "previewWithdraw(uint256[],uint256)": FunctionFragment;
    "priceGobblerCumulativeLast()": FunctionFragment;
    "priceGooCumulativeLast()": FunctionFragment;
    "safeDeposit(uint256[],uint256,address,uint256,uint256)": FunctionFragment;
    "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)": FunctionFragment;
    "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "skim(address)": FunctionFragment;
    "swap(uint256[],uint256,uint256[],uint256,address,bytes)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdraw(uint256[],uint256,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "DOMAIN_SEPARATOR()"
      | "MANAGEMENT_FEE_BPS"
      | "MANAGEMENT_FEE_BPS()"
      | "PERFORMANCE_FEE_BPS"
      | "PERFORMANCE_FEE_BPS()"
      | "allowance"
      | "allowance(address,address)"
      | "approve"
      | "approve(address,uint256)"
      | "artGobblers"
      | "artGobblers()"
      | "balanceOf"
      | "balanceOf(address)"
      | "blockTimestampLast"
      | "blockTimestampLast()"
      | "convertToAssets"
      | "convertToAssets(uint256)"
      | "convertToFractions"
      | "convertToFractions(uint256,uint256)"
      | "decimals"
      | "decimals()"
      | "deposit"
      | "deposit(uint256[],uint256,address)"
      | "feeTo"
      | "feeTo()"
      | "flagGobbler"
      | "flagGobbler(uint256,bool)"
      | "flagged"
      | "flagged(uint256)"
      | "getReserves"
      | "getReserves()"
      | "goo"
      | "goo()"
      | "kDebt"
      | "kDebt()"
      | "kLast"
      | "kLast()"
      | "mintGobbler"
      | "mintGobbler()"
      | "minter"
      | "minter()"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "onERC721Received"
      | "onERC721Received(address,address,uint256,bytes)"
      | "permit"
      | "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"
      | "previewDeposit"
      | "previewDeposit(uint256[],uint256)"
      | "previewSwap"
      | "previewSwap(uint256[],uint256,uint256[],uint256)"
      | "previewWithdraw"
      | "previewWithdraw(uint256[],uint256)"
      | "priceGobblerCumulativeLast"
      | "priceGobblerCumulativeLast()"
      | "priceGooCumulativeLast"
      | "priceGooCumulativeLast()"
      | "safeDeposit"
      | "safeDeposit(uint256[],uint256,address,uint256,uint256)"
      | "safeSwap"
      | "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)"
      | "safeWithdraw"
      | "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)"
      | "setFeeTo"
      | "setFeeTo(address)"
      | "setMinter"
      | "setMinter(address)"
      | "skim"
      | "skim(address)"
      | "swap"
      | "swap(uint256[],uint256,uint256[],uint256,address,bytes)"
      | "symbol"
      | "symbol()"
      | "totalAssets"
      | "totalAssets()"
      | "totalSupply"
      | "totalSupply()"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "withdraw"
      | "withdraw(uint256[],uint256,address,address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGEMENT_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MANAGEMENT_FEE_BPS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERFORMANCE_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERFORMANCE_FEE_BPS()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "artGobblers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "artGobblers()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blockTimestampLast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockTimestampLast()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToFractions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToFractions(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256[],uint256,address)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTo()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flagGobbler",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "flagGobbler(uint256,bool)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "flagged",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "flagged(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "goo", values?: undefined): string;
  encodeFunctionData(functionFragment: "goo()", values?: undefined): string;
  encodeFunctionData(functionFragment: "kDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "kDebt()", values?: undefined): string;
  encodeFunctionData(functionFragment: "kLast", values?: undefined): string;
  encodeFunctionData(functionFragment: "kLast()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintGobbler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintGobbler()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "minter()", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewSwap",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewSwap(uint256[],uint256,uint256[],uint256)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw(uint256[],uint256)",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "priceGobblerCumulativeLast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceGobblerCumulativeLast()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceGooCumulativeLast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceGooCumulativeLast()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeDeposit",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDeposit(uint256[],uint256,address,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeWithdraw",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTo(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "skim",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "skim(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap(uint256[],uint256,uint256[],uint256,address,bytes)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256[],uint256,address,address)",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGEMENT_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MANAGEMENT_FEE_BPS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERFORMANCE_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERFORMANCE_FEE_BPS()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artGobblers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "artGobblers()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockTimestampLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockTimestampLast()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToFractions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToFractions(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256[],uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flagGobbler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flagGobbler(uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flagged", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flagged(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goo()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kDebt()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kLast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kLast()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintGobbler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGobbler()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewSwap(uint256[],uint256,uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw(uint256[],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceGobblerCumulativeLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceGobblerCumulativeLast()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceGooCumulativeLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceGooCumulativeLast()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeDeposit(uint256[],uint256,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTo(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "skim(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swap(uint256[],uint256,uint256[],uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256[],uint256,address,address)",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256[],uint256,uint256)": EventFragment;
    "FeesAccrued(address,uint256,bool,uint256)": EventFragment;
    "Swap(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Sync(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VaultMint(address,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,address,address,uint256[],uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Deposit(address,address,uint256[],uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesAccrued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FeesAccrued(address,uint256,bool,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Swap(address,address,uint256,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync(uint256,uint256)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultMint"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VaultMint(address,uint256,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Withdraw(address,address,address,uint256[],uint256,uint256)"
  ): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  amount: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  caller: string;
  receiver: string;
  gobblers: BigNumber[];
  gooTokens: BigNumber;
  fractions: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FeesAccruedEventObject {
  feeTo: string;
  fractions: BigNumber;
  performanceFee: boolean;
  _deltaK: BigNumber;
}
export type FeesAccruedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber],
  FeesAccruedEventObject
>;

export type FeesAccruedEventFilter = TypedEventFilter<FeesAccruedEvent>;

export interface SwapEventObject {
  caller: string;
  receiver: string;
  gooTokensIn: BigNumber;
  gobblersMultIn: BigNumber;
  gooTokensOut: BigNumber;
  gobblerMultOut: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface SyncEventObject {
  gooBalance: BigNumber;
  multBalance: BigNumber;
}
export type SyncEvent = TypedEvent<[BigNumber, BigNumber], SyncEventObject>;

export type SyncEventFilter = TypedEventFilter<SyncEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VaultMintEventObject {
  minter: string;
  auctionPricePerMult: BigNumber;
  poolPricePerMult: BigNumber;
  gooConsumed: BigNumber;
}
export type VaultMintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  VaultMintEventObject
>;

export type VaultMintEventFilter = TypedEventFilter<VaultMintEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  gobblers: BigNumber[];
  gooTokens: BigNumber;
  fractions: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Goober extends BaseContract {
  contractName: "Goober";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GooberInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    MANAGEMENT_FEE_BPS(overrides?: CallOverrides): Promise<[number]>;

    "MANAGEMENT_FEE_BPS()"(overrides?: CallOverrides): Promise<[number]>;

    PERFORMANCE_FEE_BPS(overrides?: CallOverrides): Promise<[number]>;

    "PERFORMANCE_FEE_BPS()"(overrides?: CallOverrides): Promise<[number]>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    artGobblers(overrides?: CallOverrides): Promise<[string]>;

    "artGobblers()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blockTimestampLast(overrides?: CallOverrides): Promise<[number]>;

    "blockTimestampLast()"(overrides?: CallOverrides): Promise<[number]>;

    convertToAssets(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    "convertToAssets(uint256)"(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    convertToFractions(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fractions: BigNumber }>;

    "convertToFractions(uint256,uint256)"(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fractions: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256[],uint256,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    "feeTo()"(overrides?: CallOverrides): Promise<[string]>;

    flagGobbler(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "flagGobbler(uint256,bool)"(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flagged(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "flagged(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        _gooReserve: BigNumber;
        _gobblerReserve: BigNumber;
        _blockTimestampLast: number;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        _gooReserve: BigNumber;
        _gobblerReserve: BigNumber;
        _blockTimestampLast: number;
      }
    >;

    goo(overrides?: CallOverrides): Promise<[string]>;

    "goo()"(overrides?: CallOverrides): Promise<[string]>;

    kDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    "kDebt()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    kLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    "kLast()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintGobbler(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintGobbler()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    "minter()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    previewDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fractions: BigNumber }>;

    "previewDeposit(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fractions: BigNumber }>;

    previewSwap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { erroneousGoo: BigNumber }>;

    "previewSwap(uint256[],uint256,uint256[],uint256)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { erroneousGoo: BigNumber }>;

    previewWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fractions: BigNumber }>;

    "previewWithdraw(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fractions: BigNumber }>;

    priceGobblerCumulativeLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceGobblerCumulativeLast()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceGooCumulativeLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    "priceGooCumulativeLast()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeDeposit(uint256[],uint256,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeSwap(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)"(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      newFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setFeeTo(address)"(
      newFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setMinter(address)"(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    skim(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "skim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "swap(uint256[],uint256,uint256[],uint256,address,bytes)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    "totalAssets()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256[],uint256,address,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  MANAGEMENT_FEE_BPS(overrides?: CallOverrides): Promise<number>;

  "MANAGEMENT_FEE_BPS()"(overrides?: CallOverrides): Promise<number>;

  PERFORMANCE_FEE_BPS(overrides?: CallOverrides): Promise<number>;

  "PERFORMANCE_FEE_BPS()"(overrides?: CallOverrides): Promise<number>;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  artGobblers(overrides?: CallOverrides): Promise<string>;

  "artGobblers()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blockTimestampLast(overrides?: CallOverrides): Promise<number>;

  "blockTimestampLast()"(overrides?: CallOverrides): Promise<number>;

  convertToAssets(
    fractions: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
  >;

  "convertToAssets(uint256)"(
    fractions: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
  >;

  convertToFractions(
    gooTokens: PromiseOrValue<BigNumberish>,
    gobblerMult: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "convertToFractions(uint256,uint256)"(
    gooTokens: PromiseOrValue<BigNumberish>,
    gobblerMult: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  deposit(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256[],uint256,address)"(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  "feeTo()"(overrides?: CallOverrides): Promise<string>;

  flagGobbler(
    tokenId: PromiseOrValue<BigNumberish>,
    _flagged: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "flagGobbler(uint256,bool)"(
    tokenId: PromiseOrValue<BigNumberish>,
    _flagged: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flagged(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "flagged(uint256)"(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      _gooReserve: BigNumber;
      _gobblerReserve: BigNumber;
      _blockTimestampLast: number;
    }
  >;

  "getReserves()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      _gooReserve: BigNumber;
      _gobblerReserve: BigNumber;
      _blockTimestampLast: number;
    }
  >;

  goo(overrides?: CallOverrides): Promise<string>;

  "goo()"(overrides?: CallOverrides): Promise<string>;

  kDebt(overrides?: CallOverrides): Promise<BigNumber>;

  "kDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

  kLast(overrides?: CallOverrides): Promise<BigNumber>;

  "kLast()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintGobbler(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintGobbler()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minter(overrides?: CallOverrides): Promise<string>;

  "minter()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "onERC721Received(address,address,uint256,bytes)"(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  previewDeposit(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "previewDeposit(uint256[],uint256)"(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewSwap(
    gobblersIn: PromiseOrValue<BigNumberish>[],
    gooIn: PromiseOrValue<BigNumberish>,
    gobblersOut: PromiseOrValue<BigNumberish>[],
    gooOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "previewSwap(uint256[],uint256,uint256[],uint256)"(
    gobblersIn: PromiseOrValue<BigNumberish>[],
    gooIn: PromiseOrValue<BigNumberish>,
    gobblersOut: PromiseOrValue<BigNumberish>[],
    gooOut: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "previewWithdraw(uint256[],uint256)"(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceGobblerCumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;

  "priceGobblerCumulativeLast()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceGooCumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;

  "priceGooCumulativeLast()"(overrides?: CallOverrides): Promise<BigNumber>;

  safeDeposit(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    minFractionsOut: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeDeposit(uint256[],uint256,address,uint256,uint256)"(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    minFractionsOut: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeSwap(
    erroneousGooAbs: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    gobblersIn: PromiseOrValue<BigNumberish>[],
    gooIn: PromiseOrValue<BigNumberish>,
    gobblersOut: PromiseOrValue<BigNumberish>[],
    gooOut: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)"(
    erroneousGooAbs: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    gobblersIn: PromiseOrValue<BigNumberish>[],
    gooIn: PromiseOrValue<BigNumberish>,
    gobblersOut: PromiseOrValue<BigNumberish>[],
    gooOut: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeWithdraw(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    maxFractionsIn: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)"(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    maxFractionsIn: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    newFeeTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setFeeTo(address)"(
    newFeeTo: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    newMinter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setMinter(address)"(
    newMinter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  skim(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "skim(address)"(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    gobblersIn: PromiseOrValue<BigNumberish>[],
    gooIn: PromiseOrValue<BigNumberish>,
    gobblersOut: PromiseOrValue<BigNumberish>[],
    gooOut: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "swap(uint256[],uint256,uint256[],uint256,address,bytes)"(
    gobblersIn: PromiseOrValue<BigNumberish>[],
    gooIn: PromiseOrValue<BigNumberish>,
    gobblersOut: PromiseOrValue<BigNumberish>[],
    gooOut: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalAssets(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
  >;

  "totalAssets()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
  >;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256[],uint256,address,address)"(
    gobblers: PromiseOrValue<BigNumberish>[],
    gooTokens: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    MANAGEMENT_FEE_BPS(overrides?: CallOverrides): Promise<number>;

    "MANAGEMENT_FEE_BPS()"(overrides?: CallOverrides): Promise<number>;

    PERFORMANCE_FEE_BPS(overrides?: CallOverrides): Promise<number>;

    "PERFORMANCE_FEE_BPS()"(overrides?: CallOverrides): Promise<number>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    artGobblers(overrides?: CallOverrides): Promise<string>;

    "artGobblers()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockTimestampLast(overrides?: CallOverrides): Promise<number>;

    "blockTimestampLast()"(overrides?: CallOverrides): Promise<number>;

    convertToAssets(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    "convertToAssets(uint256)"(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    convertToFractions(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToFractions(uint256,uint256)"(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    deposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256[],uint256,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    "feeTo()"(overrides?: CallOverrides): Promise<string>;

    flagGobbler(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "flagGobbler(uint256,bool)"(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    flagged(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "flagged(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        _gooReserve: BigNumber;
        _gobblerReserve: BigNumber;
        _blockTimestampLast: number;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        _gooReserve: BigNumber;
        _gobblerReserve: BigNumber;
        _blockTimestampLast: number;
      }
    >;

    goo(overrides?: CallOverrides): Promise<string>;

    "goo()"(overrides?: CallOverrides): Promise<string>;

    kDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "kDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    kLast(overrides?: CallOverrides): Promise<BigNumber>;

    "kLast()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintGobbler(overrides?: CallOverrides): Promise<void>;

    "mintGobbler()"(overrides?: CallOverrides): Promise<void>;

    minter(overrides?: CallOverrides): Promise<string>;

    "minter()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    previewDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewDeposit(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewSwap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewSwap(uint256[],uint256,uint256[],uint256)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewWithdraw(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceGobblerCumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;

    "priceGobblerCumulativeLast()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceGooCumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;

    "priceGooCumulativeLast()"(overrides?: CallOverrides): Promise<BigNumber>;

    safeDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeDeposit(uint256[],uint256,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeSwap(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)"(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFeeTo(
      newFeeTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeTo(address)"(
      newFeeTo: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(
      newMinter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinter(address)"(
      newMinter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    skim(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "skim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swap(uint256[],uint256,uint256[],uint256,address,bytes)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalAssets(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    "totalAssets()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { gooTokens: BigNumber; gobblerMult: BigNumber }
    >;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256[],uint256,address,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      amount?: null
    ): ApprovalEventFilter;

    "Deposit(address,address,uint256[],uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      gobblers?: null,
      gooTokens?: null,
      fractions?: null
    ): DepositEventFilter;
    Deposit(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      gobblers?: null,
      gooTokens?: null,
      fractions?: null
    ): DepositEventFilter;

    "FeesAccrued(address,uint256,bool,uint256)"(
      feeTo?: PromiseOrValue<string> | null,
      fractions?: null,
      performanceFee?: null,
      _deltaK?: null
    ): FeesAccruedEventFilter;
    FeesAccrued(
      feeTo?: PromiseOrValue<string> | null,
      fractions?: null,
      performanceFee?: null,
      _deltaK?: null
    ): FeesAccruedEventFilter;

    "Swap(address,address,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      gooTokensIn?: null,
      gobblersMultIn?: null,
      gooTokensOut?: null,
      gobblerMultOut?: null
    ): SwapEventFilter;
    Swap(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      gooTokensIn?: null,
      gobblersMultIn?: null,
      gooTokensOut?: null,
      gobblerMultOut?: null
    ): SwapEventFilter;

    "Sync(uint256,uint256)"(
      gooBalance?: null,
      multBalance?: null
    ): SyncEventFilter;
    Sync(gooBalance?: null, multBalance?: null): SyncEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TransferEventFilter;

    "VaultMint(address,uint256,uint256,uint256)"(
      minter?: PromiseOrValue<string> | null,
      auctionPricePerMult?: null,
      poolPricePerMult?: null,
      gooConsumed?: null
    ): VaultMintEventFilter;
    VaultMint(
      minter?: PromiseOrValue<string> | null,
      auctionPricePerMult?: null,
      poolPricePerMult?: null,
      gooConsumed?: null
    ): VaultMintEventFilter;

    "Withdraw(address,address,address,uint256[],uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      gobblers?: null,
      gooTokens?: null,
      fractions?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      gobblers?: null,
      gooTokens?: null,
      fractions?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    MANAGEMENT_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "MANAGEMENT_FEE_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERFORMANCE_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    "PERFORMANCE_FEE_BPS()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    artGobblers(overrides?: CallOverrides): Promise<BigNumber>;

    "artGobblers()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blockTimestampLast(overrides?: CallOverrides): Promise<BigNumber>;

    "blockTimestampLast()"(overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToAssets(uint256)"(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToFractions(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "convertToFractions(uint256,uint256)"(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "deposit(uint256[],uint256,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTo()"(overrides?: CallOverrides): Promise<BigNumber>;

    flagGobbler(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "flagGobbler(uint256,bool)"(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flagged(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flagged(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    goo(overrides?: CallOverrides): Promise<BigNumber>;

    "goo()"(overrides?: CallOverrides): Promise<BigNumber>;

    kDebt(overrides?: CallOverrides): Promise<BigNumber>;

    "kDebt()"(overrides?: CallOverrides): Promise<BigNumber>;

    kLast(overrides?: CallOverrides): Promise<BigNumber>;

    "kLast()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintGobbler(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintGobbler()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    "minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    previewDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewDeposit(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewSwap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewSwap(uint256[],uint256,uint256[],uint256)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "previewWithdraw(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceGobblerCumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;

    "priceGobblerCumulativeLast()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceGooCumulativeLast(overrides?: CallOverrides): Promise<BigNumber>;

    "priceGooCumulativeLast()"(overrides?: CallOverrides): Promise<BigNumber>;

    safeDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeDeposit(uint256[],uint256,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeSwap(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)"(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      newFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setFeeTo(address)"(
      newFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinter(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setMinter(address)"(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    skim(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "skim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "swap(uint256[],uint256,uint256[],uint256,address,bytes)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256[],uint256,address,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MANAGEMENT_FEE_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MANAGEMENT_FEE_BPS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERFORMANCE_FEE_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PERFORMANCE_FEE_BPS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    artGobblers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "artGobblers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockTimestampLast(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blockTimestampLast()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertToAssets(uint256)"(
      fractions: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToFractions(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "convertToFractions(uint256,uint256)"(
      gooTokens: PromiseOrValue<BigNumberish>,
      gobblerMult: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256[],uint256,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeTo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flagGobbler(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "flagGobbler(uint256,bool)"(
      tokenId: PromiseOrValue<BigNumberish>,
      _flagged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flagged(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "flagged(uint256)"(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "goo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kDebt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kLast(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kLast()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintGobbler(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintGobbler()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "onERC721Received(address,address,uint256,bytes)"(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    previewDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previewDeposit(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewSwap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previewSwap(uint256[],uint256,uint256[],uint256)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previewWithdraw(uint256[],uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceGobblerCumulativeLast(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceGobblerCumulativeLast()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceGooCumulativeLast(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceGooCumulativeLast()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeDeposit(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeDeposit(uint256[],uint256,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      minFractionsOut: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeSwap(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeSwap(uint256,uint256,uint256[],uint256,uint256[],uint256,address,bytes)"(
      erroneousGooAbs: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeWithdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeWithdraw(uint256[],uint256,address,address,uint256,uint256)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      maxFractionsIn: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      newFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setFeeTo(address)"(
      newFeeTo: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setMinter(address)"(
      newMinter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    skim(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "skim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "swap(uint256[],uint256,uint256[],uint256,address,bytes)"(
      gobblersIn: PromiseOrValue<BigNumberish>[],
      gooIn: PromiseOrValue<BigNumberish>,
      gobblersOut: PromiseOrValue<BigNumberish>[],
      gooOut: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAssets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256[],uint256,address,address)"(
      gobblers: PromiseOrValue<BigNumberish>[],
      gooTokens: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
